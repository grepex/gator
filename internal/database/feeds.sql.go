// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :exec
insert into
    feeds (
        id,
        created_at,
        updated_at,
        name,
        url,
        user_id
    )
values ($1, $2, $3, $4, $5, $6)
`

type CreateFeedParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) error {
	_, err := q.db.ExecContext(ctx, createFeed,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	return err
}

const showFeeds = `-- name: ShowFeeds :many
SELECT f.id, f.created_at, f.updated_at, f.name, f.url, f.user_id, u.name as username
FROM feeds f
    LEFT JOIN users u on f.user_id = u.id
ORDER BY f.name
`

type ShowFeedsRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Name      string
	Url       string
	UserID    uuid.UUID
	Username  sql.NullString
}

func (q *Queries) ShowFeeds(ctx context.Context) ([]ShowFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, showFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ShowFeedsRow
	for rows.Next() {
		var i ShowFeedsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.Url,
			&i.UserID,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
